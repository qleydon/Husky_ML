#!/usr/bin/env python

import rospy
import time
import numpy as np

from geometry_msgs.msg import Twist, Point, Pose
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from std_srvs.srv import Empty

'''def talker():
   pub_cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size=10)
   rate = rospy.Rate(10) # 10hz
   while not rospy.is_shutdown():
    vel_cmd = Twist()
    vel_cmd.linear.x = 0.15
    vel_cmd.angular.z = 0.0
    pub_cmd_vel.publish(vel_cmd)
    print("velocity: 0.15, angle: 0.0")
    rate.sleep()

if __name__ == '__main__':
    print("starting")
    rospy.init_node('Husky_dqn')
    try:
        talker()
    except rospy.ROSInterruptException:
        pass'''


def listener():
    while True:
        rospy.init_node('listener', anonymous=True)
        scan = None
        scan_range = []
        scan_ds = []
        while scan is None:
            try:
                scan = rospy.wait_for_message('front/scan', LaserScan, timeout=5)
            except:
                pass

        for i in range(len(scan.ranges)):
                    if scan.ranges[i] == float('Inf'):
                        scan_range.append(3.5)
                    elif np.isnan(scan.ranges[i]):
                        scan_range.append(0)
                    else:
                        scan_range.append(scan.ranges[i])
        
        crash_flag = False
        for i in range(36):
            if i== 15 or i == 16 or i==17:
                scan_ds.append(1) #safe number
                continue # seeing camera
            start_index = i * 20
            end_index = start_index + 20
            sample = scan_range[start_index:end_index]
            val = sum(sample)/20
            scan_ds.append(val)
            if(i < 4 or i > 26):
                if val < 0.6:
                    crash_flag = True
            else:
                if val < 0.35:
                    crash_flag = True
        
        print(scan_ds)
        rospy.sleep(2)
    

if __name__ == '__main__':
    try:
        listener()
    except rospy.ROSInterruptException:
        pass
